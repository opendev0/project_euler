#ifndef __INTFUN_H
#define __INTFUN_H

#include <cmath>	// sqrt
#include "vector.h"

unsigned int numDigits(unsigned int number)
{
	unsigned int result = 0;
	
	for (;number > 0; number /= 10, ++result);
	
	return result;
}

unsigned int pow(unsigned int base, unsigned int exp)
{
	unsigned int result = base;
	
	for (unsigned int i = 1; i < exp; ++i) {
		result *= base;
	}
	
	return result;
}

unsigned int factorial(unsigned int n)
{
	unsigned int result = 1;
	
	while (n > 1) {
		result *= n--;
	}
	
	return result;
}

/**
 * @param v Vector containing unsigned integers
 * @return Sum of all integers in v
 */
unsigned int sumVector(vector<unsigned int> const &v)
{
	unsigned int result = 0;
	
	for (unsigned int i = 0; i < v.size(); ++i) {
		result += v[i];
	}
	
	return result;
}

/**
 * Get proper divisors of n.
 *
 * @return Unsorted vector with proper divisors of n
 * @note Returned vector has to be deleted by the caller
 */
vector<unsigned int> getDivisors(unsigned int n)
{
	vector<unsigned int> divisors;
	unsigned int const max = sqrt(n);
	
	divisors.push_back(1);
	if (max * max == n) {
		divisors.push_back(max);
		
		for (unsigned int i = 2; i < max; ++i) {
			if (!(n % i)) {
				divisors.push_back(i);
				divisors.push_back(n / i);
			}
		}
	} else {
		for (unsigned int i = 2; i <= max; ++i) {
			if (!(n % i)) {
				divisors.push_back(i);
				divisors.push_back(n / i);
			}
		}
	}
	
	return divisors;
}
/*vector<unsigned int> *getDivisors(unsigned int n)
{
	vector<unsigned int> *divisors = new vector<unsigned int>();
	divisors->push_back(1);
	unsigned int const max = sqrt(n);
	
	if (!(n & 1)) {
		divisors->push_back(2);
		divisors->push_back(n / 2);
	}
	if (!(n % max)) {
		divisors->push_back(max);
		
		for (unsigned int i = 3; i < max; i += 2) {
			if (!(n % i)) {
				divisors->push_back(i);
				divisors->push_back(n / i);
			}
		}
	} else {
		for (unsigned int i = 3; i <= max; i += 2) {
			if (!(n % i)) {
				divisors->push_back(i);
				divisors->push_back(n / i);
			}
		}
	}
}*/

vector<unsigned int> &sortVector(vector<unsigned int> &v)
{
	size_t end = v.size() - 1;
	bool change = true;
	for (size_t i = 0; change && (i < end); ++i) {
		change = false;
		
		for (size_t j = 0; j < end; ++j) {
			if (v[j] > v[j + 1]) {
				unsigned int tmp = v[j];
				v[j] = v[j + 1];
				v[j + 1] = tmp;
				
				change = true;
			}
		}
	}
	
	return v;
}

/**
 * A number is abundant if the sum of its proper divisors is greater than the number itself.
 * Proper divisors are all divisors less than the number itself.
 */
bool isAbundant(unsigned int n)
{
	// the smallest abundant number is 12
	if (n < 12) return false;
	
	return (sumVector(getDivisors(n)) > n);
}

unsigned int rotateRight(unsigned int const number)
{
	unsigned int len = numDigits(number);
	
	if (len > 1) {
		unsigned int firstPart = (number % 10) * pow(10, len-1);
		unsigned int lastPart = (number / 10);
		
		return firstPart + lastPart;
	}
		
	return number;
}

unsigned int rotateLeft(unsigned int const number)
{
	unsigned int len = numDigits(number);
	
	if (len > 1) {
		unsigned int power = pow(10, len - 1);
		unsigned int lastPart = (number / power);
		unsigned int firstPart = (number - (lastPart * power)) * 10;
		
		return firstPart + lastPart;
	}
	
	return number;
}

unsigned int squareOfDigits(unsigned int i)
{
	unsigned int result = 0;
	
	while (i) {
		unsigned int digit = i % 10;
		result += digit * digit, i /= 10;
	}
	
	return result;
}

/**
 * A number is a triangle number if it is generated by the series of adding all natural numbers (1 + 2 + 3 + ...)
 */
bool isTriangleNumber(unsigned int const n)
{
	unsigned int sum = 0;
	
	for (unsigned int i = 1; sum < n; ++i) {
		sum += i;
	}
	
	if (sum == n) return true;
	
	return false;
}

#endif